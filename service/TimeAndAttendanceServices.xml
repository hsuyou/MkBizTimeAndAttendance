<?xml version="1.0" encoding="UTF-8"?>

<services>
    <service verb="edit" noun="TimeEntry">
        <in-parameters>
            <parameter name="timeEntryId" required="true"/>
            <parameter name="fromDate"/>
            <parameter name="thruDate"/>
            <parameter name="comments"/>
            <parameter name="partyId"/>
        </in-parameters>
        <out-parameters>
        </out-parameters>

        <actions>
            <script>
                EntityValue queryForTimeEntry = ec.entity.find("mantle.work.time.TimeEntry").condition( [ "timeEntryId" : timeEntryId, "partyId" : partyId ] ).one()
            </script>
            <if condition="queryForTimeEntry">
                <if condition="!fromDate">
                    <set field="fromDate" from="queryForTimeEntry.fromDate"/>
                </if>
                <if condition="!thruDate">
                    <set field="thruDate" from="queryForTimeEntry.thruDate"/>
                </if>
                <service-call name="mantle.work.TimeServices.delete#TimeEntry" in-map="context" out-map="context"/>
                <service-call name="mantle.work.TimeServices.store#TimeEntry" in-map="context" out-map="context"/>
                <else><message>That time entry does not exist for you.</message></else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="PTORequest">
        <in-parameters>
            <!--Eventually add a new enum 'RqtPTO'-->
            <parameter name="requestTypeEnumId" default-value="RqtPTO"/>
            <parameter name="customerPartyId" default="ec.user.userAccount?.partyId"/>
            <parameter name="assignToPartyId" default-value="EX_JOHN_DOE"/>
            <parameter name="statusId" default-value="ReqSubmitted"/>
            <parameter name="description"/>
            <parameter name="startDate"/>
            <parameter name="endDate"/>
            <parameter name="hoursRequested"/>
        </in-parameters>
        <out-parameters>
        </out-parameters>

        <actions>
            <set field="requestName" default-value="TimeOffRequest // ${customerPartyId} // ${startDate} - ${endDate} // ${hoursRequested}hrs"/>
            <service-call name="mantle.request.RequestServices.create#Request" in-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="TimeEntryClockIn">
        <in-parameters>
            <parameter name="comments"/>
            <parameter name="partyId"/>
        </in-parameters>
        <out-parameters>
        </out-parameters>

        <actions>
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <service-call name="mantle.work.TimeServices.create#TimeEntryClockIn" in-map="context"/>
        </actions>
    </service>

    <service verb="calculate" noun="SumOfHours" type="java" location="com.mk.moqui.TimeAndAttendanceServices" method="calculateSumOfHours">
        <in-parameters>
            <parameter name="timeEntryList" type="List" />
        </in-parameters>
    </service>

    <service verb="handle" noun="FilterDate" type="java" location="com.mk.moqui.TimeAndAttendanceServices" method="handleFilterDate">
        <in-parameters>
            <parameter name="reportThru"/>
            <parameter name="reportFrom"/>
        </in-parameters>
    </service>

    <!--<service verb="get" noun="TimeEntriesForFullCalendar">-->
        <!--<in-parameters>-->

            <!--<parameter name="partyId"/>-->
            <!--<parameter name="partyIdList" type="List"><parameter name="partyId"/></parameter>-->

            <!--<parameter name="start" required="true"/>-->
            <!--<parameter name="end" required="true"/>-->
            <!--<parameter name="titleGString"/>-->
            <!--<parameter name="urlGString"/>-->
        <!--</in-parameters>-->

        <!--<out-parameters>-->
            <!--<parameter name="eventList" type="List">-->
                <!--<parameter name="eventMap" type="Map">-->
                    <!--<parameter name="id"/>-->
                    <!--<parameter name="title"/>-->
                    <!--<parameter name="start"><description>actualStartDate or estimatedStartDate as ISO8601 formatted String</description></parameter>-->
                    <!--<parameter name="end"><description>actualCompletionDate or estimatedCompletionDate (or if null start date +-->
                        <!--actualWorkDuration, estimatedWorkDuration, or estimatedWorkTime) as a ISO8601 (yyyy-MM-dd'T'HH:mm:ss) formatted String</description></parameter>-->
                    <!--&lt;!&ndash; NOTE: consider supporting allDay, color, etc in the future with WorkEffort fields &ndash;&gt;-->
                    <!--<parameter name="url"><description>Only returned if urlGString is specified</description></parameter>-->
                <!--</parameter>-->
            <!--</parameter>-->
        <!--</out-parameters>-->

        <!--<actions>-->
            <!--&lt;!&ndash; start and end are ISO8601 date strings &ndash;&gt;-->
            <!--<set field="startTs" from="ec.l10n.parseTimestamp(start.toString() + ' 00:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')"/>-->
            <!--<set field="endTs" from="ec.l10n.parseTimestamp(end.toString() + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS')"/>-->
            <!--&lt;!&ndash; <log level="warn" message="=========== Event FullCalendarData start ${start} - ${startTs} end ${end} - ${endTs}"/> &ndash;&gt;-->
            <!--<set field="startDate" from="ec.l10n.parseDate(start.toString(), 'yyyy-MM-dd')"/>-->
            <!--<set field="endDate" from="ec.l10n.parseDate(end.toString(), 'yyyy-MM-dd')"/>-->


            <!--<set field="partyIdSet" from="new HashSet()"/>-->
            <!--<if condition="partyId"><script>partyIdSet.add(partyId)</script></if>-->
            <!--<if condition="partyIdList"><script>partyIdSet.addAll(partyIdList)</script></if>-->
            <!--<script>println "||||||||||||||||||||||||||||||||||||"</script>-->
            <!--<script>println context</script>-->

            <!--<set field="eventList" from="[]"/>-->
            <!--&lt;!&ndash;<if condition="!facilityIdSet &amp;&amp; !partyIdSet &amp;&amp; !assetIdSet"><return/></if>&ndash;&gt;-->

            <!--<entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">-->
                <!--<econdition field-name="partyId" operator="in" from="partyIdSet" ignore-if-empty="true"/>-->
                <!--&lt;!&ndash; for events look for start date within the range &ndash;&gt;-->

                <!--<select-field field-name="timeEntryId,fromDate,thruDate"/>-->
            <!--</entity-find>-->
            <!--<script>println context</script>-->
            <!--<iterate list="timeEntryList" entry="timeEntry">-->
                <!--<set field="title" from="timeEntry.timeEntryId"/>-->
                <!--<set field="start" from="timeEntry.timeEntryId"/>-->
            <!--</iterate>-->
        <!--</actions>-->
    <!--</service>-->
</services>
